# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  release:
    types: [created]
  # run manually
  workflow_dispatch:

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: us-east-1
      AWS_ECR_REPOSITORY_NAME: demo-flask-repository
      AWS_ECS_SERVICE_NAME: flask-demo-service
      AWS_ECS_CLUSTER_NAME: flask-demo-cluster2

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_DEFAULT_REGION }}
        aws-access-key-id: ASIAQESX5Q7P2WDO2M7S
        aws-secret-access-key: dLVMGv/+HIRZOzCw155iyojToAmgyE85wTdUFKje
        aws-session-token: IQoJb3JpZ2luX2VjEIb//////////wEaCXVzLWVhc3QtMSJGMEQCIF6nd6Q7aQSMYBLmFuPSMZ99G0LW4YyUcscXcoukDm7QAiBP2uq0Dhb7mQ1BOlEbrynbJRyaSU5Rz/oLlNWBiuGKYSqbAwh+EAAaDDAwOTg0ODA2Mzk2NyIMwq0xyC6VDp3W0rlTKvgCwgxmph1Z2uPDjOhgLqyW2XvDXg8AVOE7dMWZ9Rnaw8MBFXIB6SdJ8AT+e/Yr5m7tFJs3ou6zT3VGXSifyg+IU6ESVKjzVMwaoxZzSJ9gsi6DG8IVKnqhKErXhKY69USPwlAkZwq0mkFMGmemMtG2mRmv+YMmb/6hj3n9T2WkeFR1wkc0tZTdqilmsLRpBmEXeo84ve6HOTYIoTMSKPdSnejQbILUk4dbMbf5aKATAgVA/qT19/xu1M/dfPaxSsJXsq9/7iGURTo5LA5UyvROWHIBAqk3CXnCUITWMrbX3beWQH/asZnt4PgtEIuntFLlTnAV4VRjyztk7ax01Q5w/IYwL30PkeDpOTDCPLTSKj0vTzDwn+SYAo1E8hYhH7TkT6bGoeOSJlIhJMHoNSF99+6Xd3nhX6RbP3wmaE8KOwJdbF7BLyyjc0uiJ+GGPHU1D+Qj85t8Ovny62UdFoDQqAbaJdWXTqGfNmI1Qlci3XPEVgU8EFaEODDs8+mUBjqnAQaC9pQEpvkDm/V2cWqu3zgp8t4NWOBs4YQn4Sb5dccoHbXJoQqOP3iK5E6gHnR+71OcHeh3SDmGescz2M4gFzSne09z54f2jvsZzijXDDCWGdX2ruM5hUwdP0CIg0FKYTuChKmNU3syeIBT7ngXIdld5N7uxOeQdU+0tyazJLe8V/s/DIyeLiQcnuAI7uNSHGJXEpYVOjF+04/u1wUUnuXe1+t0tNRV
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build \
            --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --build-arg AWS_DEFAULT_REGION="${{ env.AWS_DEFAULT_REGION }}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # - name: Build, tag, and push image to Amazon ECR (with RDS)
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY_NAME }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and
    #     # push it to ECR so that it can
    #     # be deployed to ECS.
    #     docker build \
    #         --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
    #         --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
    #         --build-arg AWS_DEFAULT_REGION="${{ env.AWS_DEFAULT_REGION }}" \
    #         --build-arg POSTGRES_USER="${{ secrets.POSTGRES_USER }}" \
    #         --build-arg POSTGRES_PW="${{ secrets.POSTGRES_PW }}" \
    #         --build-arg POSTGRES_URL="${{ secrets.POSTGRES_URL }}" \
    #         --build-arg POSTGRES_DB="${{ secrets.POSTGRES_DB }}" \
    #         -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws-task-definition.json
        container-name: demo-flask-repository
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: flask-demo-service
        cluster: flask-demo-cluster2
        wait-for-service-stability: true
